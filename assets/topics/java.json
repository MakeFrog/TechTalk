[
  {
    "id": "java-1",
    "question": "JVM의 구조와 Java의 실행방식을 설명해주세요.",
    "answers": [
      "JVM은 자바 애플리케이션을 실행하는 가상 머신이다. 구조는 Class Loader, Execution Engine, Runtime Data Area, JNI, Native Method Library로 구성된다.",
      "Class Loader는 클래스를 로드하고 링크하는 역할을 합니다.",
      "Execution Engine은 바이트 코드를 실행합니다. 인터프리터와 JIT 컴파일러로 이루어져 있습니다.",
      "Java의 실행 방식은 소스코드를 바이트코드로 변환한 후, Class Loader를 통해 로딩하여 Execution Engine에서 실행됩니다.",
      "Garbage Collector는 더 이상 필요하지 않는 객체를 제거하여 메모리를 관리합니다."
    ]
  },
  {
    "id": "java-2",
    "question": "GC가 무엇인지, 필요한 이유는 무엇인지, 동작방식에 대해 설명해주세요.",
    "answers": [
      "GC는 힙 영역에서 사용되지 않는 객체들을 제거하는 작업을 총칭합니다.",
      "이 객체를 제거하는 작업이 필요한 이유는 자바는 개발자가 메모리를 직접 해제해줄 수 없는 언어이기 때문입니다.",
      "GC의 동작방식은 가장 간단한 Serial GC 방식으로 설명합니다.",
      "GC는 Minor GC, Major GC로 구분할 수 있습니다.",
      "이것이 중요한 이유는 GC 수행시 시스템이 멈추기 때문에 의도치 않은 장애의 원인이 될 수 있습니다."
    ]
  },
  {
    "id": "java-3",
    "question": "컬렉션 프레임워크에 대해서 설명해주세요.",
    "answers": [
      "Java Collection은 자료구조를 효율적으로 관리하는 라이브러리입니다.",
      "List, Set은 Collection 인터페이스를 상속받지만, Map 인터페이스는 별도로 정의됩니다.",
      "제네릭을 사용하여 타입 안정성을 확보합니다."
    ]
  },
  {
    "id": "java-4",
    "question": "접근 제어자의 종류와 이에 대해 설명해주세요.",
    "answers": [
      "private, default, protected, public이 있습니다.",
      "private은 해당 클래스 내에서만 접근 가능하고, default는 해당 패키지에서 접근 가능합니다.",
      "protected는 상속한 클래스까지 접근이 가능하며, public은 어디서든 접근이 가능합니다."
    ]
  },
  {
    "id": "java-5",
    "question": "객체지향에 대해서 설명해주세요.",
    "answers": [
      "객체지향은 의존성 관리를 중심으로 합니다.",
      "객체지향으로 의존성을 관리함으로써 변경 영향을 최소화하고 독립적인 배포 및 개발이 가능해집니다.",
      "객체지향에서 가장 중요한 것은 DIP(Dependency Inversion Principle)를 통한 고수준 정책과 저수준 구현 세부사항의 분리입니다."
    ]
  },
  {
    "id": "java-6",
    "question": "SOLID(객체지향 5대원칙)에 대해서 설명해주세요.",
    "answers": [
      "SRP(단일책임원칙): 한 클래스는 하나의 책임만 가져야 합니다.",
      "OCP(개방-폐쇄 원칙): 확장에는 열려 있으나 변경에는 닫혀 있어야 합니다.",
      "LSP(리스코프 치환 원칙): 하위 타입은 상위 타입으로 대체 가능해야 합니다.",
      "ISP(인터페이스 분리 원칙): 클라이언트는 자신이 사용하지 않는 메서드에 의존 관계를 맺으면 안됩니다.",
      "DIP(의존관계 역전 원칙): 추상화된 것은 구체적인 것에 의존해서는 안됩니다."
    ]
  },
  {
    "id": "java-7",
    "question": "동일성(identity)와 동등성(equality)에 대해 설명해주세요. (equals(), ==)",
    "answers": [
      "동일성은 객체의 주소를 비교하는 것이고, 동등성은 객체의 값이 같음을 비교하는 것입니다.",
      "equals() 메소드는 동등성 비교를 수행합니다.",
      "== 연산자는 참조 변수가 참조하는 객체의 주소값을 비교합니다."
    ]
  },
  {
    "id": "java-8",
    "question": "원시타입과 참조타입의 차이에 대해 설명해주세요.",
    "answers": [
      "원시타입은 값 자체를 저장하고, 참조타입은 값이 저장된 메모리의 주소를 저장합니다.",
      "원시타입은 스택 영역에 저장되고, 참조타입은 힙 영역에 객체가 저장되고, 스택 영역에는 객체의 참조값이 저장됩니다."
    ]
  },
  {
    "id": "java-9",
    "question": "String, StringBuilder, StringBuffer 각각의 차이에 대해 설명해주세요.",
    "answers": [
      "String은 불변(immutable) 클래스로, 한 번 생성되면 변경할 수 없습니다.",
      "StringBuilder와 StringBuffer는 가변(mutable) 클래스로, 문자열을 변경할 수 있습니다.",
      "StringBuilder는 싱글 스레드 환경에서 사용하며, StringBuffer는 멀티 스레드 환경에서 안전합니다."
    ]
  },
  {
    "id": "java-10",
    "question": "Java8에서 추가된 기능에 대해서 설명해주세요.",
    "answers": [
      "Java 8에서 추가된 기능은 Lambda식, Stream API, Optional, 날짜 시간 API, StringJoiner 등이 있습니다.",
      "Lambda식은 함수형 프로그래밍을 지원하는 기능으로, 익명 함수를 만들어 사용할 수 있습니다.",
      "Stream API는 컬렉션을 함수형 프로그래밍 방식으로 처리할 수 있도록 도와줍니다.",
      "Optional은 Null-safety를 제공하여 NullPointerException을 방지합니다.",
      "날짜 시간 API는 Joda-time 등의 라이브러리에서 영향을 받아 개선된 API를 제공합니다.",
      "StringJoiner는 문자열을 간단하게 합칠 수 있는 기능을 제공합니다."
    ]
  },
  {
    "id": "java-11",
    "question": "try-with-resource에 대해서 설명해주세요.",
    "answers": [
      "try-with-resources 문은 자원을 자동으로 해제해주는 기능을 제공합니다.",
      "try 블록을 빠져나갈 때 자동으로 close() 메서드를 호출하여 자원을 안전하게 해제합니다.",
      "주로 입출력 스트림과 같은 외부 리소스를 다룰 때 사용됩니다."
    ]
  },
  {
    "id": "java-12",
    "question": "강한 결합과 느슨한 결합이 무엇인지 설명해주세요.",
    "answers": [
      "강한 결합은 한 모듈이 다른 모듈에 너무 의존적인 상태를 말합니다. 구현 세부사항에 대해 직접적으로 의존하며, 변경이 발생할 경우 다른 모듈에 영향을 미칠 가능성이 큽니다.",
      "느슨한 결합은 모듈 간의 의존성을 최소화하여 모듈 간의 상호작용을 유연하게 만드는 것을 말합니다. 모듈이 다른 모듈에 대해 필요한 것은 인터페이스로 추상화된 고수준 정책만을 알고 있으며, 구체적인 구현 세부사항은 모르는 것이 이상적입니다."
    ]
  },
  {
    "id": "java-13",
    "question": "직렬화와 역직렬화에 대해서 설명해주세요.",
    "answers": [
      "직렬화는 자바 시스템 내부에서 사용되는 객체나 데이터를 외부의 자바 시스템에서도 사용할 수 있도록 바이트 형태로 변환하는 과정입니다.",
      "역직렬화는 직렬화된 데이터를 다시 원래의 객체나 데이터로 변환하는 과정을 말합니다.",
      "직렬화를 통해 객체를 파일에 저장하거나 네트워크로 전송할 수 있으며, 역직렬화를 통해 원래의 객체로 복원할 수 있습니다."
    ]
  },
  {
    "id": "java-14",
    "question": "Mutable 객체와 Immutable 객체의 차이점에 대해 설명해주세요.",
    "answers": [
      "Mutable 객체는 변경 가능한 객체이며, Immutable 객체는 변경 불가능한 객체입니다.",
      "Mutable 객체는 내부 상태를 변경할 수 있지만, Immutable 객체는 한 번 생성되면 내부 상태를 변경할 수 없습니다.",
      "Mutable 객체는 도메인 개체(도메인 클래스 혹은 엔터티)로 주로 사용되며, 변경 메서드는 Command method로 리턴 타입이 void입니다.",
      "Immutable 객체는 값 객체, 서비스 객체 등에 사용되며, 변경 메서드는 변경한 객체의 복사본을 반환해야 합니다."
    ]
  },
  {
    "id": "java-15",
    "question": "자바에서 null을 안전하게 다루는 방법에 대해 설명해주세요.",
    "answers": [
      "null을 안전하게 다루기 위해 공개 메서드가 아닌 곳에는 assert를 사용하여 null을 방어할 수 있습니다.",
      "메서드의 인자를 받을 때 Objects.requireNonNull()을 사용하여 방어할 수 있습니다.",
      "Optional을 사용하여 리턴 타입에서 null을 반환하지 않도록 방어할 수 있습니다.",
      "사전 조건과 사후 조건을 명확히 하여 계약에 의한 설계를 실천해야 합니다."
    ]
  },
  {
    "id": "java-16",
    "question": "JDK와 JRE의 차이점을 설명하세요.",
    "answers": [
      "JDK는 Java Development Kit의 약자로, 자바 개발에 필요한 도구를 제공합니다.",
      "JRE는 Java Runtime Environment의 약자로, 자바로 만들어진 프로그램을 실행시키는데 필요한 도구를 제공합니다.",
      "JDK는 JRE를 포함하고 있으며, 개발할 때는 JDK를 사용하고, 프로그램을 실행시킬 때는 JRE만 있으면 됩니다."
    ]
  }
]