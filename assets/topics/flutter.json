[
  {
    "id": "flutter-1",
    "question": "StatelessWidget 와 StatefulWidget 의 차이에 대해 설명해 주세요",
    "answers": [
      "StatelessWidget은 한 번 생성된 후 변하지 않는 정적인 위젯이며, StatefulWidget은 내부 상태를 가지고 있어 화면이 업데이트되거나 사용자 상호 작용에 따라 상태가 변경될 수 있는 동적인 위젯입니다."
    ]
  },
  {
    "id": "flutter-2",
    "question": "BuildContext에 대해 설명해주세요",
    "answers": [
      "BuildContext는 Flutter 프레임워크에서 위젯 트리를 탐색하고 위젯 간에 정보를 전달하는 데 사용되는 객체입니다. 이것은 현재 위젯의 위치와 상태에 대한 정보를 포함하고 있습니다. 일반적으로 위젯의 빌드 메서드 내에서 사용되며, 위젯의 위치, 테마, 크기 및 다른 위젯과의 관계 등을 결정하는 데 중요한 역할을 합니다."
    ]
  },
  {
    "id": "flutter-3",
    "question": "Future 와 Stream 의 공통점과 차이점에 대해 설명해주세요",
    "answers": [
      "Future와 Stream의 공통점은 비동기적인 작업을 처리할 수 있다는 점입니다. 둘 다 비동기적인 결과를 처리하고, 비동기 작업을 수행하는 데 유용합니다. 그러나 차이점은 Future는 단일 값 또는 오류를 반환하는 반면, Stream은 연속된 값의 흐름을 반환한다는 것입니다.",
      "Future는 한 번의 작업 후 결과를 반환하고 종료되지만, Stream은 여러 값 또는 이벤트를 순차적으로 전달하며, 종료되지 않고 계속 값을 생성할 수 있습니다."
    ]
  },
  {
    "id": "flutter-4",
    "question": "StatefulWidget 이 가지는 State 의 생명주기를 상세하게 설명해 주세요.",
    "answers": [
      "StatefulWidget이 가지는 State의 생명주기는 다음과 같습니다.\n·initState(): State 객체가 생성되고 위젯 트리에 추가될 때 호출됩니다. 이 메서드에서는 초기화 작업을 수행하거나 한 번만 수행되어야 하는 작업을 처리합니다.\n·didChangeDependencies(): State 객체가 의존성에 대한 변경을 감지했을 때 호출됩니다. 예를 들어, 부모 위젯이나 위젯 트리 내에서 의존하는 객체가 변경되었을 때 호출됩니다.\n·didUpdateWidget(oldWidget): State 객체가 새로운 위젯 인스턴스와 연결되었을 때 호출됩니다. 이 메서드에서는 이전 위젯과 현재 위젯 간의 차이를 처리할 수 있습니다.\n·build(BuildContext context): 위젯을 다시 그릴 때 호출됩니다. 이 메서드에서는 화면을 구성하는 위젯을 반환합니다.\n·setState(VoidCallback fn): 상태가 업데이트되었음을 프레임워크에 알리고, 위젯을 다시 그리도록 스케줄링합니다.\n·dispose(): State 객체가 제거되기 전에 호출됩니다. 이 메서드에서는 리소스를 해제하거나 구독을 취소하는 등의 정리 작업을 수행합니다."
    ]
  },
  {
    "id": "flutter-5",
    "question": "setState을 사용했을 때 어떤 일이 일어나는지 설명해 주세요",
    "answers": [
      "\nsetState()를 호출하면 Flutter 프레임워크는 해당 State의 상태를 업데이트하고, 연결된 StatefulWidget의 build() 메서드를 호출하여 화면을 다시 그립니다. 이를 통해 상태 변화가 반영된 새로운 UI가 사용자에게 보여집니다."
    ]
  },
  {
    "id": "flutter-6",
    "question": "setState을 사용했을 때 어떤 일이 일어나는지 설명해 주세요",
    "answers": [
      "setState()를 호출하면 Flutter 프레임워크는 해당 State의 상태를 업데이트하고, 연결된 StatefulWidget의 build() 메서드를 호출하여 화면을 다시 그립니다. 이를 통해 상태 변화가 반영된 새로운 UI가 사용자에게 보여집니다."
    ]
  },
  {
    "id": "flutter-7",
    "question": "Flutter에서 Key의 역할은 무엇인가요?",
    "answers": [
      "Key는 Flutter에서 위젯의 고유 식별자로 사용됩니다. Key를 사용하면 위젯이 재사용되거나 이동할 때 Flutter가 정확히 어떤 위젯을 업데이트해야 하는지 판단할 수 있습니다."
    ]
  },

  {
    "id": "flutter-8",
    "question": "위젯이 빌드되는 과정을 주요 3가지의 위젯트리를 통해 설명해주세요",
    "answers": [
      "Flutter 애플리케이션은 위젯 트리에서 시작하여 엘리먼트 트리를 거쳐 렌더 트리로 변환되며, 최종적으로 화면에 표시됩니다.",
      "Widget Tree: 위젯 트리는 Flutter 애플리케이션의 UI를 계층 구조로 표현한 것입니다. 이는 위젯들이 부모-자식 관계로 구성되어 있으며, 화면에 표시되는 모든 위젯이 이에 속합니다.",
      "Element Tree: 엘리먼트 트리는 위젯 트리의 구현체로, Flutter 엔진이 위젯 트리를 관리하고 조작하기 위해 사용됩니다. 엘리먼트는 위젯과 동일한 계층 구조를 가지며, 각각의 위젯에 대한 불변성 정보를 포함합니다.",
      "Render Tree: 렌더 트리는 실제 화면에 렌더링되는 위젯의 표현입니다. 위젯 트리의 각 위젯에 해당하는 렌더 객체들이 모여서 구성됩니다. Flutter 엔진은 렌더 트리를 사용하여 화면을 그리고, 위젯의 크기, 위치 및 모양을 결정합니다."
    ]
  },
  {
    "id": "flutter-9",
    "question": "CachedNetworkImage를 사용하여 이미지를 캐싱할 때, 이미지가 캐싱되는 기준을 어떻게 판별할 수 있나요?",
    "answers": [
      "Flutter의 CachedNetworkImage는 이미지를 캐싱하기 위해 여러 가지 기준을 사용합니다. 기본적으로 URL을 기반으로 이미지를 캐싱하며, 같은 URL의 이미지는 동일한 이미지로 간주됩니다. 이를 통해 동일한 이미지가 여러 번 로드될 때 캐싱된 이미지가 다시 사용됩니다."
    ]
  },
  {
    "id": "flutter-10",
    "question": "isolate에 대한 개념을 설명해주세요",
    "answers": [
      "isolate는 독립적인 작업 단위로, 자체적인 메모리 공간을 가지고 병렬 처리 및 비동기 작업을 수행하는 기능입니다. 각 isolate는 자체적으로 실행되는 코드를 가지며, 메모리를 공유하지 않고 통신을 위해 메시지 전달을 사용함 이를 통해 플러터 애플리케이션에서 병렬 작업을 처리하고, 응답성을 향상시키며, 긴 작업을 분리하여 앱의 성능을 개선할 수 있습니다."
    ]
  },
  {
    "id": "flutter-11",
    "question": "ListView와 ListView.builder의 차이점에 대해 설명해주세요",
    "answers": [
      "ListView는 모든 아이템을 한 번에 생성하여 메모리를 소비하고, 화면에 보여지지 않는 아이템도 렌더링합니다. 반면에 ListView.builder는 화면에 보이는 영역에만 아이템을 생성하여 메모리를 절약하고, 스크롤되는 동안 필요한 아이템만 생성하여 효율적인 성능을 제공합니다."
    ]
  },
  {
    "id": "flutter-12",
    "question": "mixin에 대해서 설명해주세요",
    "answers": [
      "Mixin은 다중 상속을 지원하지 않는 언어에서 코드 재사용을 촉진하기 위한 방법 중 하나입니다. 이는 클래스가 다른 클래스의 특성을 가져올 수 있게 해주는 재사용 가능한 코드 조각입니다.",
      "일반적으로 클래스에 구현할 수 있는 메서드나 속성을 포함하는데 사용됩니다. mixin은 해당 클래스에 구현되는 특정 동작이나 특성을 정의하고 다른 클래스에서 필요에 따라 가져와 사용할 수 있도록 합니다. 따라서 코드를 재사용하고 간결하게 유지할 수 있습니다."
    ]
  },
  {
    "id": "flutter-13",
    "question": "Inherited Widget에 대해 설명해주세요",
    "answers": [
      "InheritedWidget은 상위 위젯에서 하위 위젯으로 데이터를 전달하는 Flutter의 위젯입니다. 이를 통해 앱 전체에서 데이터 공유와 업데이트가 가능해지며, 효율적인 상태 관리가 가능합니다"
    ]
  },
  {
    "id": "flutter-14",
    "question": "Expanded 위젯에 대한 개념과 언제 사용하는지 설명해주세요",
    "answers": [
      "Expanded 위젯은 자식 위젯이 확장되어 부모 위젯의 사용 가능한 모든 공간을 차지하도록 하는 것이 맞습니다. 제가 그 내용을 올바르게 설명하지 않았습니다. 이를 정정해주셔서 감사합니다."
    ]
  }
]