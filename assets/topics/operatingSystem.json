[
  {
    "id": "operatingSystem-1",
    "question": "프로세스와 스레드의 차이를 설명해보세요.",
    "answers": [
      "프로세스는 실행 중인 프로그램을 의미합니다. 스레드는 실행 제어만 분리한 것을 의미합니다.",
      "프로세스는 운영체제로부터 자원을 할당받지만, 스레드는 프로세스로부터 자원을 할당받고, 프로세스의 코드/데이터/힙 영역을 공유하기 때문에 좀 더 효율적으로 통신할 수 있습니다. 또한 컨텍스트 스위칭도 캐시 메모리를 비우지 않아도 되는 스레드 쪽이 빠릅니다. 그리고, 스레드는 자원 공유로 인해 문제가 발생할 수 있으니 이를 염두에 둔 프로그래밍을 해야합니다."
    ]
  },
  {
    "id": "operatingSystem-2",
    "question": "컨텍스트 스위칭에 대해 설명해보세요.",
    "answers": [
      "컨텍스트 스위칭은 한 Task가 끝날 때까지 기다리는 것이 아니라 여러 작업을 번갈아가며 실행해서 동시에 처리될 수 있도록 하는 방법입니다.",
      "인터럽트가 발생하면 현재 프로세스의 상태를 PCB에 저장하고 새로운 프로세스의 상태를 레지스터에 저장하는 방식으로 동작합니다. 이 때, CPU는 아무런 일을 하지 않으므로 잦은 컨텍스트 스위칭은 성능 저하를 일으킬 수 있습니다.",
      "스레드와 프로세스의 동작 방식이 약간 상이한데, 스레드는 캐시 메모리나 PCB에 저장해야 하는 내용이 적고, 비워야 하는 내용도 적기 때문에 상대적으로 더 빠른 컨텍스트 스위칭이 일어날 수 있습니다."
    ]
  },
  {
    "id": "operatingSystem-3",
    "question": "멀티스레드 프로그래밍에 대해 설명해보세요.",
    "answers": [
      "멀티스레드 프로그래밍은 하나의 프로세스에서 여러 개의 스레드를 만들어 자원의 생성과 관리의 중복을 최소화하는 것을 의미합니다.",
      "장점으로는 멀티 프로세스에 비해 메모리 자원 소모가 줄어들며, 힙 영역을 통한 스레드 간 통신이 간단하고 프로세스 간 통신보다 빠른 컨텍스트 스위칭이 있습니다.",
      "단점으로는 힙 영역에 있는 자원을 사용할 때 동기화가 필요하며, 동기화를 위해 락을 과도하게 사용하면 성능이 저하될 수 있으며, 하나의 스레드가 비정상적으로 동작하면 다른 스레드도 종료될 수 있습니다."
    ]
  },
  {
    "id": "operatingSystem-4",
    "question": "Thread-safe하다는 의미와 설계하는 법을 설명해보세요.",
    "answers": [
      "Thread-safe하다는 의미는 두 개 이상의 스레드가 race condition에 들어가거나 같은 객체에 동시에 접근해도 연산 결과의 정합성이 보장될 수 있게끔 메모리 가시성이 확보된 상태를 의미합니다.",
      "Thread-safe를 설계하는 법으로는 java.util.concurrent 패키지 하위의 클래스를 사용하거나, 인스턴스 변수를 두지 않고, Singleton 패턴을 사용합니다. 다만, 일반적으로 구현하는 Singleton Pattern은 Thread-safe하지 않으므로 동기화(syncronized) 블럭에서 연산을 수행하여 보완합니다."
    ]
  },
  {
    "id": "operatingSystem-5",
    "question": "프로세스 동기화에 대해 설명해보세요.",
    "answers": [
      "프로세스 동기화는 다중 프로세스 환경에서 자원에 한 프로세스만이 접근 가능하도록 하는 것입니다.",
      "프로세스 동기화를 하지 않으면 데이터의 일관성이 깨지기 때문에 연산 결과가 잘못 반환될 가능성이 존재합니다.",
      "또한, Race Condition(경쟁 상태)이 발생할 수 있는데, 이는 여러 프로세스나 스레드가 동기화 메커니즘 없이 자원에 접근하려는 상황을 가리킵니다.",
      "Critical Section(임계 구역)은 여러 스레드가 동시에 접근해서는 안 되는 공유 자원에 접근하는 코드 블록을 의미합니다.",
      "한 임계 구역에 하나의 스레드 혹은 프로세스만 접근이 가능하며, 이를 제어하기 위해 세마포어, 뮤텍스 등의 메커니즘이 사용됩니다."
    ]
  },
  {
    "id": "operatingSystem-6",
    "question": "프로세스 동기화에 대해 설명해보세요.",
    "answers": [
      "프로세스 동기화는 다중 프로세스 환경에서 자원에 한 프로세스만이 접근 가능하도록 하는 것입니다.",
      "프로세스 동기화를 하지 않으면 데이터의 일관성이 깨지기 때문에 연산 결과가 잘못 반환될 가능성이 존재합니다.",
      "Race Condition(경쟁 상태)은 여러 프로세스나 스레드가 동기화 메커니즘 없이 자원에 접근하려는 상황을 가리키며, 공유된 자원에 대한 접근 순서에 따라 실행 결과가 달라질 수 있는 상황을 의미합니다.",
      "Critical Section(임계 구역)은 여러 스레드가 동시에 접근해서는 안 되는 공유 자원에 접근하는 코드 블록을 의미합니다.",
      "임계 구역 문제를 해결하기 위한 조건으로는 상호 배제(Mutual Exclusion), 진행(Progress), 유한 대기(Bounded Waiting)가 있습니다."
    ]
  },
  {
    "id": "operatingSystem-7",
    "question": "교착상태와 기아상태의 해결방법에 대해 설명해보세요.",
    "answers": [
      "교착상태(Deadlock)는 서로 다른 프로세스가 서로 점유하고 있는 자원의 반납을 대기하고 있는 상태를 의미합니다.",
      "교착상태 발생 조건으로는 상호 배제, 점유 대기, 비선점, 순환 대기가 있습니다.",
      "해결 방법으로는 예방, 회피, 회복, 무시가 있습니다.",
      "기아상태(Starvation)는 여러 프로세스가 부족한 자원을 점유하기 위해 경쟁할 때, 특정 프로세스가 영원히 자원 할당이 되지 않는 경우입니다.",
      "기아상태를 해결하기 위해서는 우선순위를 변경하는 방법을 사용합니다. 이를 위해 우선순위를 수시로 변경하거나, 오래 기다린 프로세스의 우선순위를 높여주거나, Queue를 사용합니다."
    ]
  },
  {
    "id": "operatingSystem-8",
    "question": "세마포어와 뮤텍스의 차이에 대해 설명해보세요.",
    "answers": [
      "세마포어는 여러 개의 프로세스가 접근 가능한 공유 자원을 관리하는 방식이고, 뮤텍스가 될 수 있지만, 뮤텍스는 한 번에 한 개의 프로세스만 접근 가능하도록 관리하는 방식입니다. 따라서 뮤텍스는 세마포어가 될 수 없습니다.",
      "또, 세마포어는 다른 프로세스가 세마포어를 해제할 수 있지만, 뮤텍스는 락을 획득한 프로세스만 락을 반환할 수 있습니다."
    ]
  },
  {
    "id": "operatingSystem-9",
    "question": "가상 메모리에 대해 설명해보세요.",
    "answers": [
      "가상 메모리는 프로세스가 실제 메모리의 크기와 상관없이 메모리를 이용할 수 있도록 지원하는 기술입니다.",
      "가상 메모리는 실제 메모리(RAM, main memory, first storage)와 보조 기억 장치(auxiliary storage, secondary storage)의 Swap 영역으로 구성됩니다.",
      "OS는 메모리 관리자(Memory Management Unit)를 통해 메모리를 관리하며 프로세스는 사용하는 메모리가 실제 메모리인지, Swap 영역인지 모릅니다.",
      "Swap 영역은 실제 메모리가 아니기 때문에 지연시간이 많이 발생하며, 가급적이면 Swap 메모리를 사용하지 않도록 설계하는 것이 좋고, 만약 계속해서 사용하는 양이 증가한다면 메모리 누수를 의심해 볼 수 있습니다."
    ]
  },
  {
    "id": "operatingSystem-10",
    "question": "캐시의 지역성에 대해 설명해보세요.",
    "answers": [
      "시간 지역성과 공간 지역성으로 나눌 수 있으며, 시간 지역성은 최근에 접근한 데이터에 다시 접근하는 경향을 의미하고, 공간 지역성은 최근 접근한 데이터의 주변 공간에 다시 접근하는 경향을 의미합니다."
    ]
  },
  {
    "id": "operatingSystem-11",
    "question": "프로세스 관련 용어를 설명해보세요.",
    "answers": [
      "PCB(프로세스 제어 블록): 프로세스에 대한 중요한 정보를 저장하는 자료구조입니다.",
      "PC(프로그램 카운터): 프로세스 실행을 위한 다음 명령의 주소를 표시합니다.",
      "캐시 메모리: 자주 사용되는 데이터가 저장되는 공간으로, CPU의 레지스터와 메모리 사이에서 병목 현상을 완화하는 장치입니다."
    ]
  },
  {
    "id": "operatingSystem-12",
    "question": "인터럽트(Interrupt)란 무엇인가요?",
    "answers": [
      "인터럽트는 CPU가 프로그램을 실행하고 있을 때, 입출력 요청 또는 예외 상황 등의 이벤트가 발생하여 CPU의 정상적인 흐름을 방해하는 것을 말합니다.",
      "운영체제는 인터럽트를 처리하여 CPU가 현재 실행 중인 작업을 일시 중단하고, 인터럽트 서비스 루틴을 실행합니다.",
      "일반적으로 하드웨어나 소프트웨어에서 인터럽트를 발생시키며, 이를 통해 입출력 장치와 통신하거나 예외 상황을 처리합니다."
    ]
  },
  {
    "id": "operatingSystem-13",
    "question": "페이징(Paging)과 세그멘테이션(Segmentation)의 차이는 무엇인가요?",
    "answers": [
      "페이징과 세그멘테이션은 가상 메모리 관리 기법 중 일부입니다.",
      "페이징은 물리적 메모리를 고정된 크기의 페이지로 나누어 가상 메모리와 물리 메모리 간의 매핑을 수행합니다.",
      "세그멘테이션은 프로세스의 논리적 단위인 세그먼트를 물리적 메모리에 할당하는 것으로, 각 세그먼트는 크기가 서로 다를 수 있습니다.",
      "따라서 페이징은 고정 크기의 블록으로 메모리를 관리하고, 세그멘테이션은 논리적인 단위로 메모리를 관리합니다."
    ]
  },
  {
    "id": "operatingSystem-14",
    "question": "데드락(Deadlock)이란 무엇인가요?",
    "answers": [
      "데드락은 다중 프로세스 또는 스레드가 서로 점유한 자원을 기다리며 무한정 대기하는 상태를 의미합니다.",
      "데드락이 발생하려면 상호 배제, 점유 대기, 비선점, 순환 대기라는 4가지 조건이 동시에 성립해야 합니다.",
      "데드락은 시스템의 성능을 저하시키며, 교착 상태에 놓인 프로세스는 어떠한 처리도 하지 못하고 계속 대기하므로 문제를 해결하기 어렵습니다."
    ]
  },
  {
    "id": "operatingSystem-15",
    "question": "파일 시스템의 구조에 대해 설명해주세요.",
    "answers": [
      "파일 시스템은 파일이 저장되는 물리적인 구조와 파일에 대한 접근을 관리하는 논리적인 구조로 나뉩니다.",
      "물리적인 구조는 디스크에 파일이 저장되는 방식을 나타내며, 보조 기억 장치에 데이터를 저장하고 관리합니다.",
      "논리적인 구조는 파일의 이름, 경로, 접근 권한 등과 같은 메타데이터 정보를 저장하고, 파일의 읽기, 쓰기, 삭제 등의 동작을 수행합니다."
    ]
  },
  {
    "id": "operatingSystem-16",
    "question": "메모리 단편화에 대해 설명해주세요.",
    "answers": [
      "메모리 단편화는 메모리 공간이 조각나는 현상을 의미합니다.",
      "외부 단편화는 사용 가능한 메모리 공간이 작은 조각들로 나뉘어져 있어 원하는 크기의 프로세스가 메모리에 적재되지 못하는 상황을 의미합니다.",
      "내부 단편화는 프로세스가 할당받은 메모리 공간보다 실제로 필요한 메모리 공간이 작아서 발생하는 현상을 의미합니다.",
      "메모리 단편화를 최소화하기 위해서는 페이징, 세그멘테이션, 가상 메모리 등의 기법을 사용하거나, 압축 등의 방법을 통해 단편화를 해소할 수 있습니다."
    ]
  },
  {
    "id": "operatingSystem-17",
    "question": "라운드 로빈 스케줄링(Round Robin Scheduling)에 대해 설명해주세요.",
    "answers": [
      "라운드 로빈 스케줄링은 운영체제에서 CPU를 여러 프로세스에게 할당하는 방식 중 하나입니다.",
      "각 프로세스는 일정 시간동안 CPU를 사용할 수 있는 시간인 타임 슬라이스를 할당받으며, 이후에는 다음 프로세스에게 CPU를 넘겨주는 방식으로 동작합니다.",
      "라운드 로빈 스케줄링은 각 프로세스에게 공정한 실행 기회를 부여하고, 응답 시간을 보장하는 장점이 있습니다."
    ]
  },
  {
    "id": "operatingSystem-18",
    "question": "스레드 풀(Thread Pool)에 대해 설명해주세요.",
    "answers": [
      "스레드 풀은 미리 일정 개수의 스레드를 생성하여 관리하는 기법입니다.",
      "일반적으로 스레드를 생성하는 데에는 오버헤드가 발생하는데, 스레드 풀은 이러한 오버헤드를 줄이기 위해 사용됩니다.",
      "스레드 풀은 작업이 생성되면 생성된 스레드 중 하나에게 작업을 할당하여 실행합니다. 작업이 끝나면 해당 스레드는 다시 스레드 풀로 반환됩니다.",
      "스레드 풀은 스레드의 생성과 소멸을 관리하기 때문에 응답 시간이 단축되고, 시스템 자원을 효율적으로 사용할 수 있는 장점이 있습니다."
    ]
  },
  {
    "id": "operatingSystem-19",
    "question": "페이지 교체 알고리즘에 대해 설명해주세요.",
    "answers": [
      "페이지 교체 알고리즘은 가상 메모리에서 페이지 부재가 발생했을 때 어떤 페이지를 교체할지 결정하는 기법입니다.",
      "대표적인 페이지 교체 알고리즘으로는 FIFO(First-In-First-Out), LRU(Least Recently Used), LFU(Least Frequently Used), NRU(Not Recently Used), Clock 알고리즘이 있습니다."
    ]
  },
  {
    "id": "operatingSystem-20",
    "question": "프로세스와 스레드의 차이에 대해 설명해주세요.",
    "answers": [
      "프로세스는 운영체제로부터 자원을 할당받아 실행 중인 프로그램을 의미하며, 스레드는 프로세스의 실행 단위입니다.",
      "하나의 프로세스는 여러 개의 스레드를 가질 수 있으며, 이러한 스레드는 프로세스 내에서 코드, 데이터, 힙 영역을 공유합니다.",
      "스레드는 프로세스 내에서 각각 독립적으로 실행되는 흐름 단위이며, 각 스레드는 별도의 스택을 가지고 있습니다."
    ]
  }
]
